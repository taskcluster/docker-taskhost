{
  "name": "object-factory",
  "version": "0.1.2",
  "description": "Build/share/create reusable factories",
  "main": "factory.js",
  "bin": {
    "object-factory-viewer": "./bin/object-factory-viewer"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/lightsofapollo/object-factory"
  },
  "keywords": [
    "factory girl",
    "factory",
    "fixture",
    "object fixture"
  ],
  "scripts": {
    "test": "make test"
  },
  "author": {
    "name": "James Lal[:lightsofapollo]"
  },
  "license": "Apache2",
  "devDependencies": {
    "mocha": "~1.14.0"
  },
  "readme": "## Factory\n\nCreate and distribute test fixtures/factories.\n\n## Usage\n\nAll examples assume you have required object-factory like this:\n\n```js\nvar Factory = require('object-factory');\n```\n\n## Basic task syntax\n\n```js\nfunction Event(props) {\n  this.title = props.title;\n  this.location = props.location;\n}\n\nvar EventFactory = new Factory({\n  object: Event\n  properties: {\n    // define defaults\n    title: 'Amazing Event',\n    location: 'Bahamas'\n  }\n});\n\n// create an object with the attributes of the factory but not an\n// instance of the Event class\nvar event = EventFactory.build({ \n  title: 'xxx' \n});\n\n// Create an instance of the event class\nvar event = EventFactory.create({ \n  title: 'xxx' \n});\n\n```\n\n## Options for factories\n\nWhen creating factories there are various options that can be passed.\n\n### `.properties`\n\n```js\nnew Factory({ \n  properties: {\n    key: 'default value\n    '\n  } \n});\n```\n\nThe `.properties` property (sorry) specify the default values for a\ngiven factory.\n\n\n\n### `.object`\n\n```js\n\nvar MyThing = new Factory({ \n  object: ThingWithConstructorThatAcceptsObjects\n});\n```\n\nAs the fictional object might suggest object is the object that the\nfactories properties are passed into...\n\n```js\n// This operation\n\nMyThing.create({ xfoo: true });\n\n// Translates to this\nnew ThingWithConstructorThatAcceptsObjects({ xfoo: true })\n```\n\n### `.onbuild`\n\nThe `onbuild` property will be called if given _before_ the generated\nproperties are passed to the constructor `.object`.\n\n```js\nvar BuildMe = new Factory({\n  onbuild: function(builtObject) {\n    // use this to customize the output of your factory for dynamic\n    // values, etc...\n  }\n})\n```\n\n### `.oncreate`\n\nThe `oncreate` property will be called if given _after_ the generated\nproperties are passed to the constructor `.object`.\n\n```js\nvar BuildMe = new Factory({\n  object: Xfoo\n  oncreate: function(object) {\n    // (object instanceof Xfoo) === true\n  }\n})\n```\n\n## Composing factories\n\nYou can't create abritrarty depth in a factory. Each factory must be\none object deep but multiple factories can be referenced as properties\nto create this nesting.\n\n```js\n\nvar Person = new Factory({\n  properties: {\n    name: 'James Lal'  \n  }\n});\n\nvar Event = new Factory({\n  properties: {\n    // define defaults\n    title: 'Amazing Event',\n    location: 'Bahamas',\n    person: Person\n  }\n});\n```\n## Inheritance\n\nFactories can inherit from other factories:\n\n```js\n\nvar Developer = Person.extend({\n  properties: {\n    OCD: true  \n  }\n});\n```\n\n## Testing Factories\n\nobject factory ships with a `object-factory-viewer` binary which will\npretty print the output of your factory given a module.\n\n```js\n// xfoo.js\nmodule.exports = new Factory({\n  properties: { xfoo: 'foo' }\n});\n```\n\n```sh\n./node_modules/.bin/object-factory-viewer xfoo.js\n# will output the pretty printed (util.inspect) version of the factory.\n```\nIf your not using .onbuild or .oncreate then this is a great way to test\nthe output of your factories. This serves as a good sanity check (and\ncould be used as documentation too).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/lightsofapollo/object-factory/issues"
  },
  "homepage": "https://github.com/lightsofapollo/object-factory",
  "_id": "object-factory@0.1.2",
  "dist": {
    "shasum": "989d599373ba779035ba6f1922f9d386d50a8f6e"
  },
  "_from": "object-factory@~0.1.2",
  "_resolved": "https://registry.npmjs.org/object-factory/-/object-factory-0.1.2.tgz"
}
