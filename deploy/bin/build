#! /bin/bash

set -e

cmd_help() {
  echo "Usage: ./deploy/bin/build"
  echo
  echo 'Wrapper for the `packer` build tool with docker-worker specific logic.'
  echo
  echo "Commands:"
  echo "  help: show this help message"
  echo "  app: build the app packer target"
  echo "  base: build the base packer target"
}

packer_run() {
  echo $@
  echo
  echo
  echo "packer $@"
  time packer $@
}

template_vars() {
  echo "deploy/target/packer/$1.json"
}

packer_config() {
  echo "deploy/packer/$1.json"
}

tar_docker_worker() {
  local docker_worker_tgz=/tmp/docker-worker-$$.tgz
  # Package up the node app.
  tar \
      -zcvf $docker_worker_tgz \
      src/ \
      schemas/ \
      .npmignore \
      package.json \
      yarn.lock \
      config.yml \
      bin-utils
  mv $docker_worker_tgz docker-worker.tgz
}

cmd_app() {
  tar_docker_worker
  local git_rev=$(git rev-parse --verify HEAD)

  local hvmSourceAMI
  if $BUILD_AWS; then
      case "$AWS_ACCOUNT" in
          # NOTE: if building a new base AMI, either generate for all of these
          # accounts, or comment out the accounts you have not updated so that
          # the next person is not surprised by using an old base
          mozilla-taskcluster) hvmSourceAMI=ami-0714957760d5b7d84;;
          taskcluster-aws-staging) hvmSourceAMI=ami-058348429895fb65f;;
          *)
              echo "No base AMI defined for AWS account $AWS_ACCOUNT; create one" >&2
              echo "  ./deploy/bin/build base" >&2
              echo "and then edit 'deploy/bin/base' to include that AMI ID" >&2
              exit 1;;
      esac
  fi

  local gcpSourceImage
  if $BUILD_GCP; then
      case "$GCP_PROJECT_ID" in
          # NOTE: if building a new base image, either generate for all of these
          # accounts, or comment out the accounts you have not updated so that
          # the next person is not surprised by using an old base
          taskcluster-dev-workers) gcpSourceImage=docker-worker-base-1564532121;;
          *)
              echo "No base image defined for GCP project $GCP_PROJECT_ID; create one" >&2
              echo "  ./deploy/bin/build base" >&2
              echo "and then edit 'deploy/bin/base' to include that image name" >&2
              exit 1;;
      esac
  fi

  # Configure the deployment if needed...
  make -j100 -C deploy

  local only
  case "$CLOUD" in
      aws) only=-only=hvm-builder,hvm-builder-trusted,hvm-builder-wm,hvm-builder-trusted-wm;;
      gcp) only=-only=gcp
  esac

  packer_run \
    build \
    $only \
    -var-file $(template_vars app) \
    -var "templateContents=deploy/deploy.tar.gz" \
    -var "npmPackage=docker-worker.tgz" \
    -var "workerRevision=$git_rev" \
    -var "deployment=$DEPLOYMENT" \
    -var "hvmSourceAMI=$hvmSourceAMI" \
    -var "gcpProjectId=$GCP_PROJECT_ID" \
    -var "gcpSourceImage=$gcpSourceImage" \
    $(packer_config app)
}

cmd_base() {
  local git_rev=$(git rev-parse --verify HEAD)

  # build config file
  make target/packer/base.json -C deploy

  local only
  case "$CLOUD" in
      aws) only=-only=hvm-builder;;
      gcp) only=-only=gcp
  esac

  packer_run \
    build \
    $only \
    -var-file $(template_vars base) \
    -var "workerRevision=$git_rev" \
    -var "deployment=$DEPLOYMENT" \
    -var "gcpProjectId=$GCP_PROJECT_ID" \
    $(packer_config base)
}

cmd_packet() {
  tar_docker_worker
  make -C deploy packet
}

if [ ! -x $(which packer) ];
then
  echo "This tool requires packer go download and install it first."
  cmd_help
  exit 1
fi

rm -f packer-artifacts.json

case "$1" in
"app")
  cmd_app ${@:2}
  ;;
"base")
  cmd_base ${@:2}
  ;;
"packet")
  cmd_packet ${@:2}
  ;;
*)
  cmd_help
  ;;
esac

# extract only the AMI ids and store in a new json file
if [ -f packer-artifacts.json ]; then
  jq '
    .builds[]
    | select(.builder_type == "amazon-ebs")
    | {
      (.name): [
        .artifact_id
        | split(",")
        | .[]
        | split(":")
      ]
      | flatten
      | { (.[0]): .[1], (.[2]): .[3] }
    }
  ' packer-artifacts.json | jq -s add > docker-worker-amis.json
fi
