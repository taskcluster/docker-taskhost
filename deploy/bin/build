#! /bin/bash

set -e

cmd_help() {
  echo "Usage: ./deploy/bin/build"
  echo
  echo 'Wrapper for the `packer` build tool with docker-worker specific logic.'
  echo
  echo "Commands:"
  echo "  help: show this help message"
  echo "  app: build the app packer target"
  echo "  base: build the base packer target"
}

packer_run() {
  echo $@
  echo
  echo
  echo "packer $@"
  time packer $@
}

template_vars() {
  echo "deploy/target/packer/$1.json"
}

packer_config() {
  echo "deploy/packer/$1.json"
}

tar_docker_worker() {
  local docker_worker_tgz=/tmp/docker-worker-$$.tgz
  # Package up the node app.
  tar \
    --exclude='./node_modules' \
    --exclude='./*.pub' \
    --exclude='./build/' \
    --exclude='./deploy' \
    --exclude='.test' \
    --exclude='.git' \
    --exclude='.vagrant' \
    --exclude='./.DS_Store' \
    --exclude='./vagrant/' \
    --exclude='app.box' \
    --exclude='./worker-types-backup.json' \
    --exclude='./docker-worker-amis.json' \
    --exclude='./packer-artifacts.json' \
    --exclude='docker-worker.tgz' \
    --exclude='image.tar.gz' \
    --exclude='modules.tar.gz' \
    --exclude='kernel.tar.gz' \
    --exclude='initrd.tar.gz' \
    -zcvf $docker_worker_tgz .
  mv $docker_worker_tgz docker-worker.tgz
}

cmd_app() {
  tar_docker_worker
  local git_rev=$(git rev-parse --verify HEAD)

  # Configure the deployment if needed...
  make -j100 -C deploy

  packer_run \
    build \
    $@ \
    -var-file $(template_vars app) \
    -var "templateContents=deploy/deploy.tar.gz" \
    -var "npmPackage=docker-worker.tgz" \
    -var "workerRevision=$git_rev" \
    $(packer_config app)
}

cmd_base() {
  local git_rev=$(git rev-parse --verify HEAD)

  # build config file
  make target/packer/base.json -C deploy

  packer_run \
    build \
    $@ \
    -var-file $(template_vars base) \
    -var "workerRevision=$git_rev" \
    $(packer_config base)
}

cmd_packet() {
  tar_docker_worker
  make -C deploy packet
}

if [ ! -x $(which packer) ];
then
  echo "This tool requires packer go download and install it first."
  cmd_help
  exit 1
fi

rm -f packer-artifacts.json

case "$1" in
"app")
  cmd_app ${@:2}
  ;;
"base")
  cmd_base ${@:2}
  ;;
"packet")
  cmd_packet ${@:2}
  ;;
*)
  cmd_help
  ;;
esac

# extract only the AMI ids and store in a new json file
if [ -f packer-artifacts.json ]; then
  jq '
    .builds[]
    | {
      (.name): [
        .artifact_id
        | split(",")
        | .[]
        | split(":")
      ]
      | flatten
      | { (.[0]): .[1], (.[2]): .[3], (.[4]): .[5], (.[6]): .[7] }
    }
  ' packer-artifacts.json | jq -s add > docker-worker-amis.json
fi
