#!/usr/bin/env bash
##
# Usage:   ./save2image
# Description:	Extracts a multi-layer "docker save" TAR archive from stdin,
#		finds the largest archives and then consolidates them within a single
#		.tar.gz rootfs archive on stdout.
##

usage() {
	cat >&2 <<EOF
usage: $0 [-vh]
	-v                make verbose
	-h		  display help
EOF
}

say() {
	echo "$@" >&2
}

msg() { :; }

set -e

# Get cli options
while getopts "vh:" OPTION; do
	case $OPTION in
	h) usage && exit 0 ;;
	v) v=true && msg() { say "$@"; } ;;
	*) usage && exit 1 ;;
	esac
done

shift $((OPTIND - 1))

# Check for deps
for dep in tar jq mktemp; do
	if ! type $dep &>/dev/null; then
		say "Error: $dep not found. Please install it first."
		exit 1
	fi
done

tmp=$(mktemp -d -t packet-image-XXXXXXX)
# shellcheck disable=SC2064
trap "rm -rf $tmp" EXIT
msg "Temp directory is: $tmp"

packdir=$tmp/consolidated
mkdir "$packdir"

cd "$tmp"
msg "Extracting image"
tar --warning=no-timestamp -xf-
for layer in $(jq -r '.[0].Layers[]' manifest.json); do
	msg "Extracting layer $layer"
	tar --warning=no-timestamp -xf "$layer" -C "$packdir"
	find "$packdir" -name .wh.\* | while read -r path; do
		rm -rf "$path" "${path/.wh./}"
	done
done

gzip=gzip
if which pigz &>/dev/null; then
	gzip=pigz
fi

cd "$packdir"
msg "Creating consolidated image archive..."
if tar --create ${v:+--totals --checkpoint=.1000} ./ | $gzip; then
	msg "Flattened image archive created successfully"
else
	say "ERROR: Image archive creation failed"
fi
